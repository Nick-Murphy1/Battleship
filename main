import random

import os

import colorama

from colorama import Fore, Style

import time

import sys



colorama.init(autoreset=True)# text color resets after each print statement


def print_slow(text):

    for char in text:

        sys.stdout.write(char) # Write each character to the terminal

        sys.stdout.flush()  # Ensure the character is displayed immediately

        time.sleep(0.05) # Wait for a short time before printing the next character

    print() # Move to the next line after printing all characters




def get_valid_input(prompt, valid_range):

    while True: # Continuously loop until valid input is received

        user_input = input(prompt).strip().upper()

        if user_input in valid_range:

            return user_input

        else:

            print(f"Invalid input. Please enter a value in range {valid_range}.")  # Inform user of invalid input



print_slow("Welcome!!!")

print("")

print_slow("Let's get started ")

print("")



def initialize_board(size=10):

    return [['~' for _ in range(size)] for _ in range(size)]



def display_board(board, show_all=False):

    print("  " + " ".join(chr(ord('A') + i) for i in range(len(board))))

    for i, row in enumerate(board): # Enumerate over rows in the board

        if show_all:  # Display all cells including ship positions ('#', 'X', 'O') and empty cells ('~')
          
            row_display = " ".join(cell if cell in ['#', 'X', 'O'] else '~' for cell in row)

        else:  # Hide ship positions; display only hits ('X') and misses ('O') with empty cells ('~')

            row_display = " ".join(cell if cell in ['X', 'O'] else '~' for cell in row)

        print(f"{i+1:2} {row_display}") # Print row number (e.g., "1") and row contents

    print()

def place_ship(board, size, manually=True):

    valid_columns = [chr(ord('A') + i) for i in range(len(board))]

    valid_rows = [str(i + 1) for i in range(len(board))]

    

    if manually:

        while True:

            display_board(board, show_all=True)

            print(f"Placing ship (Size: {size})")

            
            # Get user input for starting row and column
            start_row = int(get_valid_input(f"Enter the start row (1-{len(board)}): ", valid_rows)) - 1

            start_col = ord(get_valid_input(f"Enter the start column (A-{valid_columns[-1]}): ", valid_columns)) - ord('A')

            orientation = input("Enter orientation (H for horizontal, V for vertical): ").upper()

            
            # Check if the ship can be placed horizontally
            if orientation == 'H' and start_col + size <= len(board):

                if all(board[start_row][col] == '~' for col in range(start_col, start_col + size)):
                # Place the ship on the board
                    for col in range(start_col, start_col + size):

                        board[start_row][col] = '#' # Mark the ship's position

                    return [(start_row, start_col), (start_row, start_col + size - 1)] # Return the ship's start and end coordinates

        
            # Check if the ship can be placed vertically
            elif orientation == 'V' and start_row + size <= len(board):

                if all(board[row][start_col] == '~' for row in range(start_row, start_row + size)):
                    # Place the ship on the board
                    for row in range(start_row, start_row + size):

                        board[row][start_col] = '#' # Mark the ship's position

                    return [(start_row, start_col), (start_row + size - 1, start_col)]  # Return the ship's start and end coordinates

            
            # placement is invalid and prompt to try again
            print("Invalid placement. Try again.")

    else:

        while True: # Continuously loop until the ship is placed correctly

            row = random.randint(0, len(board) - 1) # Randomly select a row

            col = random.randint(0, len(board) - 1) # Randomly select a column

            orientation = random.choice(['H', 'V']) # Randomly choose orientation (horizontal or vertical)

            

            if orientation == 'H' and col + size <= len(board):  # Check if the ship can be placed horizontally
                # Place the ship on the board
                if all(board[row][c] == '~' for c in range(col, col + size)):

                    for c in range(col, col + size):

                        board[row][c] = '#'  # Mark the ship's position

                    return [(row, col), (row, col + size - 1)] # Return the ship's start and end coordinates
        

            
            # Check if the ship can be placed vertically
            elif orientation == 'V' and row + size <= len(board):

                if all(board[r][col] == '~' for r in range(row, row + size)):
                # Place the ship on the board
                    for r in range(row, row + size):

                        board[r][col] = '#' # Mark the ship's position

                    return [(row, col), (row + size - 1, col)]  # Return the ship's start and end coordinates



def take_turn(player, computer, is_player_turn):

    board = player['board'] if is_player_turn else computer['board']

    ship_positions = computer['ship_positions'] if is_player_turn else player['ship_positions']

    guesses = player['guesses'] if is_player_turn else computer['guesses']

    hits = player['hits'] if is_player_turn else computer['hits']



    valid_columns = [chr(ord('A') + i) for i in range(len(board))]

    valid_rows = [str(i + 1) for i in range(len(board))]



    if is_player_turn:

        row = int(get_valid_input(f"Enter the row (1-{len(board)}): ", valid_rows)) - 1

        col = ord(get_valid_input(f"Enter the column (A-{valid_columns[-1]}): ", valid_columns)) - ord('A')

    else:

        row, col = random.randint(0, len(board) - 1), random.randint(0, len(board) - 1)

        while (row, col) in guesses:

            row, col = random.randint(0, len(board) - 1), random.randint(0, len(board) - 1)

    

    if (row, col) in guesses:

        if is_player_turn:

            print("You've already guessed that location. Try again.")

        return hits

    

    guesses.append((row, col))

    hit = False

    

    for i, (start, end) in enumerate(ship_positions):

        if start[0] <= row <= end[0] and start[1] <= col <= end[1]:

            hit = True

            board[row][col] = 'X'

            hits += 1

            if is_player_turn:

                print(Fore.GREEN + f"Hit at ({row+1}, {chr(col+ord('A'))})!" + Style.RESET_ALL)

                if hits == sum(ship["size"] for ship in player['ships']):

                    print(Fore.GREEN + "You sank all the enemy ships!" + Style.RESET_ALL)

            else:

                print(Fore.GREEN + f"The enemy hit your ship at ({row+1}, {chr(col+ord('A'))})!" + Style.RESET_ALL)

                if hits == sum(ship["size"] for ship in computer['ships']):

                    print(Fore.RED + "The enemy sank all your ships!" + Style.RESET_ALL)

            break

    

    if not hit:

        board[row][col] = 'O' # Mark the miss on the board

        if is_player_turn:

            print(Fore.RED + f"Miss at ({row+1}, {chr(col+ord('A'))})." + Style.RESET_ALL) # Inform user of the miss

        else:

            print(Fore.BLUE + f"The enemy missed at ({row+1}, {chr(col+ord('A'))})." + Style.RESET_ALL)

    

    return hits



def main():

    player = {

        'board': initialize_board(),

        'ship_positions': [], # List to store positions of ships placed by the computer

        'guesses': [],  # List to store guesses made by the computer

        'hits': 0,  # Counter for the number of hits the computer has made

        'ships': [{'name': 'Battleship', 'size': 4}, {'name': 'Cruiser', 'size': 3}, {'name': 'Destroyer', 'size': 2}]

    }



    computer = {

        'board': initialize_board(),

        'ship_positions': [],  # List to store positions of ships placed by the computer

        'guesses': [], # List to store guesses made by the computer

        'hits': 0, # Counter for the number of hits the computer has made

        'ships': [{'name': 'Battleship', 'size': 4}, {'name': 'Cruiser', 'size': 3}, {'name': 'Destroyer', 'size': 2}]

    }



    for ship in player['ships']:

        player['ship_positions'].append(place_ship(player['board'], ship['size'], manually=True))# Add ship position to player's list

    

    for ship in computer['ships']:

        computer['ship_positions'].append(place_ship(computer['board'], ship['size'], manually=False)) # Add ship position to computer's list
    



    game_loop(player, computer)



def game_loop(player, computer):

    turns = 0

    max_turns = 100



    while player['hits'] < sum(ship["size"] for ship in player['ships']) and computer['hits'] < sum(ship["size"] for ship in computer['ships']) and turns < max_turns:

        os.system('cls' if os.name == 'nt' else 'clear')

        

        print("Your board:")

        display_board(player['board'], show_all=True)

        

        print("Enemy's board:")

        display_board(computer['board'])

        

        player['hits'] = take_turn(player, computer, True)

        computer['hits'] = take_turn(computer, player, False)

        

        turns += 1

        time.sleep(2)

    

    if player['hits'] == sum(ship["size"] for ship in player['ships']):

        print(Fore.GREEN + "Congratulations, you won!" + Style.RESET_ALL)

        print("""

                       .---.
                  ___ /_____\\
                 /\.-`( '.' )
                / /    \_-_/_
                \ `-.-"`'V'//-.
                 `.__,   |// , \\
                     |Ll //Ll|\ \\
                     |__//   | \_\\
                    /---|[]==| / /
                    \__/ |   \/\/
                     /_   | Ll_\|
                      |       |
                      |   |   |
                      |   |   |
                      |   |   |
                      |   |   |
                      L___l___J
                       |_ | _|
                      (___|___)
                       ^^^ ^^^     

                                                              

             """)

    elif computer['hits'] == sum(ship["size"] for ship in computer['ships']):

        print(Fore.RED + "You lost." + Style.RESET_ALL)

        print("""

                     .---.
                    /_____\\
                    ( '.' )
                     \_-_/_
                  .-"`'V'//-.
                 / ,   |// , \\
                / /|Ll //Ll|\ \\
               / / |__//   | \_\\
               \ \/---|[]==| / /
                \/\__/ |   \/\/
                 |/_   | Ll_\|
                   |       |
                   |   |   |
                   |   |   |
                   |   |   |
                   |   |   |
                   L___l___J
                    |_ | _|
                   (___|___)
             """)

    else:

        print(Fore.YELLOW + "The game ended in a draw." + Style.RESET_ALL)



if __name__ == "__main__":

    main()



colorama.deinit()



# This version incorporates the following changes: ✅
 
# 1. **Dynamic 10x10 grid** initialized using a function. ✅

# 2. **Data storage** for player and computer using dictionaries. ✅

# 3. **Single functions** for each task, including guessing and printing. ✅

# 4. **Use of ASCII** to convert letters to indices for column reference. ✅

