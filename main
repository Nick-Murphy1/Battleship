import random
import os
import colorama
from colorama import Fore, Style
import time
import sys
# Initialize colorama
colorama.init(autoreset=True)
def print_slow(text):
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(0.05)
    print()
print_slow("Welcome!!!")
print("")
print_slow("Let's get started ")
print("")
# Define the size of the grid
grid_size = 0
while grid_size < 10:
    grid_size = int(input("Enter the size of the grid (minimum 10x10): "))
# Define the ships
ships = [
    {"name": "Aircraft Carrier", "size": 5},
    {"name": "Battleship", "size": 4},
    {"name": "Submarine", "size": 3},
    {"name": "Cruiser", "size": 3},
    {"name": "Destroyer", "size": 2}
]
# List of potential AI ship names
ai_ship_names = ["Ironclad", "Poseidon", "Thunderbolt", "Hercules", "Titan", "Neptune", "Valkyrie", "Zephyr", "Leviathan", "Phoenix"]
# Prompt user to give names to the ships
for ship in ships:
    ship["user_name"] = input(f"Enter a name for your {ship['name']} (Size: {ship['size']}): ")
# Assign AI ship names
for ship in ships:
    ship["ai_name"] = random.choice(ai_ship_names)
    ai_ship_names.remove(ship["ai_name"])
# Define the game mode
game_mode = input("Enter 'P' for player vs player or 'C' for player vs computer: ").upper()
os.system('cls' if os.name == 'nt' else 'clear')
print("")
# Initialize the boards
user_board = [['~' for _ in range(grid_size)] for _ in range(grid_size)]
enemy_board = [['~' for _ in range(grid_size)] for _ in range(grid_size)]
# Function to display the board
def display_board(board):
    for row in board:
        print(" ".join(row))
    print()
# Function to place ships manually
def place_ship_manually(board, ship, size):
    while True:
        display_board(board)
        print(f"Placing {ship} (Size: {size})")
        start_row = int(input(f"Enter the start row (0-{grid_size-1}): "))
        start_col = int(input(f"Enter the start column (0-{grid_size-1}): "))
        orientation = input("Enter orientation (H for horizontal, V for vertical): ").upper()
        if orientation == 'H' and start_col + size <= grid_size:
            if all(board[start_row][col] == '~' for col in range(start_col, start_col + size)):
                for col in range(start_col, start_col + size):
                    board[start_row][col] = '#'
                return [(start_row, start_col), (start_row, start_col + size - 1)]
        elif orientation == 'V' and start_row + size <= grid_size:
            if all(board[row][start_col] == '~' for row in range(start_row, start_row + size)):
                for row in range(start_row, start_row + size):
                    board[row][start_col] = '#'
                return [(start_row, start_col), (start_row + size - 1, start_col)]
        print("Invalid placement. Try again.")
# Function to place ships randomly
def place_ship_randomly(board, size):
    while True:
        row = random.randint(0, grid_size - 1)
        col = random.randint(0, grid_size - 1)
        orientation = random.choice(['horizontal', 'vertical'])

        if orientation == 'horizontal' and col + size <= grid_size:
            if all(board[row][c] == '~' for c in range(col, col + size)):
                for c in range(col, col + size):
                    board[row][c] = '#'
                return [(row, col), (row, col + size - 1)]
        elif orientation == 'vertical' and row + size <= grid_size:
            if all(board[r][col] == '~' for r in range(row, row + size)):
                for r in range(row, row + size):
                    board[r][col] = '#'
                return [(row, col), (row + size - 1, col)]
# Place user's ships
user_ship_positions = []
for ship in ships:
    position = place_ship_manually(user_board, ship["user_name"], ship["size"])
    user_ship_positions.append(position)
# Place enemy's ships randomly
enemy_ship_positions = []
for ship in ships:
    position = place_ship_randomly(enemy_board, ship["size"])
    enemy_ship_positions.append(position)
# Define the game loop
user_guesses = []
enemy_guesses = []
user_hits = 0
enemy_hits = 0
turns = 0
max_turns = 100
while user_hits < sum(ship["size"] for ship in ships) and enemy_hits < sum(ship["size"] for ship in ships) and turns < max_turns:
    os.system('cls' if os.name == 'nt' else 'clear')
    # Display the user's board
    print("Your board:")
    display_board(user_board)
    # Display the enemy's board (hidden)
    print("Enemy's board:")
    display_board([['~' if cell == '~' else 'X' for cell in row] for row in enemy_board])
    # Get the user's guess
    row = int(input("Enter the row (0-{}): ".format(grid_size - 1)))
    col = int(input("Enter the column (0-{}): ".format(grid_size - 1)))
    # Check if the user's guess is valid
    if (row, col) in user_guesses:
        print("You already guessed that location. Try again.")
        time.sleep(2)
        continue
    user_guesses.append((row, col))
    # Check if the user's guess hit a ship
    hit = False
    for i, (start, end) in enumerate(enemy_ship_positions):
        if (start[0] <= row <= end[0]) and (start[1] <= col <= end[1]):
            hit = True
            enemy_board[row][col] = 'X'
            user_hits += 1
            print(Fore.GREEN + f"Hit at ({row}, {col})!" + Style.RESET_ALL)
            if user_hits == sum(ship["size"] for ship in ships):
                print(Fore.GREEN + "You sank all the enemy ships!" + Style.RESET_ALL)
                break
            elif user_hits == ships[i]["size"]:
                print(Fore.GREEN + f"You sank the {ships[i]['ai_name']}!" + Style.RESET_ALL)
            break
    if not hit:
        enemy_board[row][col] = 'O'
        print(Fore.RED + f"Miss at ({row}, {col})." + Style.RESET_ALL)
    # Get the computer's guess
    if game_mode == 'C':
        row = random.randint(0, grid_size - 1)
        col = random.randint(0, grid_size - 1)
        while (row, col) in enemy_guesses:
            row = random.randint(0, grid_size - 1)
            col = random.randint(0, grid_size - 1)
        enemy_guesses.append((row, col))
        # Check if the computer's guess hit a ship
        hit = False
        for i, (start, end) in enumerate(user_ship_positions):
            if (start[0] <= row <= end[0]) and (start[1] <= col <= end[1]):
                hit = True
                user_board[row][col] = 'X'
                enemy_hits += 1
                print(Fore.GREEN + f"The enemy hit your ship at ({row}, {col})!" + Style.RESET_ALL)
                if enemy_hits == sum(ship["size"] for ship in ships):
                    print(Fore.RED + "The enemy sank all your ships!" + Style.RESET_ALL)
                    break
                elif enemy_hits == ships[i]["size"]:
                    print(Fore.RED + f"The enemy sank your {ships[i]['user_name']}!" + Style.RESET_ALL)
                break
        if not hit:
            user_board[row][col] = 'O'
            print(Fore.BLUE + f"The enemy missed at ({row}, {col})." + Style.RESET_ALL)
    turns += 1
    time.sleep(2)
if user_hits == sum(ship["size"] for ship in ships):
    print(Fore.GREEN + "Congratulations, you won!" + Style.RESET_ALL)
    print("""
                   .---.
              ___ /_____\\
             /\.-`( '.' )
            / /    \_-_/_
            \ `-.-"`'V'//-.
             `.__,   |// , \\
                 |Ll //Ll|\ \\
                 |__//   | \_\\
                /---|[]==| / /
                \__/ |   \/\/
                /_   | Ll_\|
                 |       |
                 |   |   |
                 |   |   |
                 |   |   |
                 |   |   |
                 L___l___J
                  |_ | _|
                 (___|___)
                  ^^^ ^^^
         """)
elif enemy_hits == sum(ship["size"] for ship in ships):
    print(Fore.RED + "You lost." + Style.RESET_ALL)
    print("""
                 .---.
                /_____\\
                ( '.' )
                 \_-_/_
              .-"`'V'//-.
             / ,   |// , \\
            / /|Ll //Ll|\ \\
           / / |__//   | \_\\
           \ \/---|[]==| / /
            \/\__/ |   \/\/
             |/_   | Ll_\|
               |       |
               |   |   |
               |   |   |
               |   |   |
               |   |   |
               L___l___J
                |_ | _|
               (___|___)


    """)
else:
    print(Fore.YELLOW + "The game ended in a draw." + Style.RESET_ALL)
# Reset colorama
colorama.deinit()
